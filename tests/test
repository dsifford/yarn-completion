#!/usr/bin/env bash
# shellcheck disable=SC2119,SC2034

TEST_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
COMPLETION_SRC="$TEST_DIR"/../yarn-completion.bash

# shellcheck source=./utils.sh
source "$TEST_DIR"/utils.sh

declare -i FALURES=0

describe 'Environment checks'
{
	it should match yarn version line in src file
	t=$(
		declare actual expected
		actual=$(sed -n 's/# Yarn Version: \([^ ]*\)/\1/p' "$COMPLETION_SRC")
		expected=$(yarn --version)
		if [[ $actual != "${expected%-*}" ]]; then
			prepend '  | ' <<- EOF
				ERROR: mismatched yarn version line in src file.
				
				expected: ${expected%-*}
				received: $actual
			EOF
			exit 1
		fi
		exit 0
	)
	passfail "$t"
}

describe 'Checking top-level commands'
{
	it should have matching commands
	t=$(
		declare output
		output=$(LC_ALL=C comm -3 <(get_commands) <(get_completions yarn ' '))
		if [[ -n $output ]]; then
			prepend '  | ' <<- EOF
				ERROR: mismatched top-level commands found
				
				$output
			EOF
			exit 1
		fi
		exit 0
	)
	passfail "$t"

	it should have matching global options
	t=$(
		declare output
		output=$(LC_ALL=C comm -3 <(get_options -g) <(get_completions yarn -))
		if [[ -n $output ]]; then
			prepend '  | ' <<- EOF
				ERROR: mismatched global command options found
				
				$output
			EOF
			exit 1
		fi
		exit 0
	)
	passfail "$t"
}

describe 'Checking top-level command options'
{
	while read -r cmd; do
		it "[$cmd]" should have matching options
		t=$(
			declare output
			output=$(LC_ALL=C comm -3 <(get_options -g "$cmd") <(get_completions yarn "$cmd" -))
			if [[ ! -z $output ]]; then
				prepend '  | ' <<- EOF
					ERROR ($cmd): mismatched options found
					
					$output
				EOF
				exit 1
			fi
			exit 0
		)
		passfail "$t"
	done < <(get_commands)
}

echo
if ((FAILURES)); then
	echo There were "$FAILURES" failures.
else
	echo All tests passed successfully.
fi

exit $FAILURES
